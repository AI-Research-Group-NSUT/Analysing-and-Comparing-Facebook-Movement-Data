# -*- coding: utf-8 -*-
"""Copy of forecastingmodels.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zbLvnYs1ERqLl1auXslkvfJRjC6DfBbY
"""

import pandas as pd
pd.set_option('display.max_columns', None)
from zipfile import ZipFile
import warnings
warnings.filterwarnings("ignore")

state = "Maharashtra"

all_state_mobility_zip = ZipFile("/content/drive/MyDrive/mobility_covid/mobility.zip")
state_mobility_df = pd.read_csv(all_state_mobility_zip.open("content/{}.csv".format(state)))
covid_cases = pd.read_csv("/content/drive/MyDrive/mobility_covid/phased_districts.csv")



state_mobility_df.head()

covid_cases["date"] = pd.to_datetime(covid_cases["Date"])
state_mobility_df['date_time'] = pd.to_datetime(state_mobility_df['date_time'])
state_mobility_df['date'] = pd.to_datetime(state_mobility_df['date_time'].dt.date)

working_data = state_mobility_df.groupby('date',as_index = False)['n_crisis','n_baseline'].sum()
working_data['length_km'],working_data['percent_change'],working_data['z_score'] = state_mobility_df.groupby('date',as_index = False)['length_km','percent_change','z_score'].mean()['length_km'],state_mobility_df.groupby('date',as_index = False)['length_km','percent_change','z_score'].mean()['percent_change'],state_mobility_df.groupby('date',as_index = False)['length_km','percent_change','z_score'].mean()['z_score']
working_data

covid_working_1 = covid_cases[covid_cases['Date']>="2020-08-13"][covid_cases["State"]==state].groupby(["date"],as_index=False)["Confirmed"].sum()
# covid_working_1["Daily"] = covid_working_1[["date","Confirmed"]].diff()["Confirmed"]
# covid_working_1['date'] = covid_working_1['Date']
covid_working_1

working_data = pd.merge(left = working_data, right = covid_working_1, on="date", how='left')
working_data

from sklearn.linear_model import LinearRegression, LogisticRegression
from tqdm.notebook import tqdm

linR = []
logR = []
for i in tqdm(range(20,443)):
  temp = working_data.iloc[i-20:i,:]
  log = LogisticRegression().fit(temp.iloc[:,1:-1].values,temp.iloc[:,-1].values)
  lin = LinearRegression().fit(temp.iloc[:,1:-1].values,temp.iloc[:,-1].values)
  next = [working_data.iloc[i+1,1:-1].values]
  linR.append(lin.predict(next))
  logR.append(log.predict(next))

len([0 for x in range(21)] + [x[0] for x in linR])

len(working_data)

working_data['linear'] = ([0 for x in range(21)] + [min(float(x[0]), 6768245) for x in linR])
working_data['logistic'] = ([0 for x in range(21)] + [min(float(x[0]),6768245) for x in logR])
working_data

working_data['linear_percentage_change'] = (working_data['Confirmed']-working_data['linear'])/working_data['Confirmed']
working_data['logistic_percentage_change'] = (working_data['Confirmed']-working_data['logistic'])/working_data['Confirmed']
working_data

max_cases = working_data['Confirmed'].max()

import matplotlib.pyplot as plt
plt.rcParams["figure.figsize"] = (20,3)
ax1 = plt.plot()
plt.plot(working_data["date"].values,working_data["linear"].values,c='b')
plt.ylabel('linear regression predicted cases',color='b')

ax2 = plt.gca().twinx()
ax2.plot(working_data["date"].values,working_data["Confirmed"].values,c='r')
plt.ylabel('true cumulative covid cases',color='r')
plt.axvspan(pd.to_datetime("2020-08-13"),pd.to_datetime("2020-11-09"), alpha=0.3, color='c')
plt.text(pd.to_datetime("2020-09-13"),max_cases,'wave 1', size=10)
plt.axvspan(pd.to_datetime("2020-11-10"),pd.to_datetime("2021-03-21"), alpha=0.3, color='m')
plt.text(pd.to_datetime("2020-12-13"),max_cases,'transition', size=10)
plt.axvspan(pd.to_datetime("2021-03-22"),pd.to_datetime("2021-07-06"), alpha=0.3, color='y')
plt.text(pd.to_datetime("2021-05-13"),max_cases,'wave 2', size=10)
plt.axvspan(pd.to_datetime("2021-07-07"),pd.to_datetime("2021-10-31"), alpha=0.3, color='g')
plt.text(pd.to_datetime("2021-08-13"),max_cases,'post 2', size=10)
plt.axvspan(pd.to_datetime("2021-04-05"),pd.to_datetime("2021-06-15"), alpha=0.5, color='palegreen')
plt.text(pd.to_datetime("2021-04-06"),0000,'Lockdown', size=10)
plt.title("Linear regression of cumulative covid cases "+state)

import matplotlib.pyplot as plt
plt.rcParams["figure.figsize"] = (20,3)
ax1 = plt.plot()
plt.plot(working_data["date"].values,working_data["logistic"].values,c='b')
plt.ylabel('logistic regression predicted cases',color='b')

ax2 = plt.gca().twinx()
ax2.plot(working_data["date"].values,working_data["Confirmed"].values,c='r')
plt.ylabel('true cumulative covid cases',color='r')
plt.axvspan(pd.to_datetime("2020-08-13"),pd.to_datetime("2020-11-09"), alpha=0.3, color='c')
plt.text(pd.to_datetime("2020-09-13"),max_cases,'wave 1', size=10)
plt.axvspan(pd.to_datetime("2020-11-10"),pd.to_datetime("2021-03-21"), alpha=0.3, color='m')
plt.text(pd.to_datetime("2020-12-13"),max_cases,'transition', size=10)
plt.axvspan(pd.to_datetime("2021-03-22"),pd.to_datetime("2021-07-06"), alpha=0.3, color='y')
plt.text(pd.to_datetime("2021-05-13"),max_cases,'wave 2', size=10)
plt.axvspan(pd.to_datetime("2021-07-07"),pd.to_datetime("2021-10-31"), alpha=0.3, color='g')
plt.text(pd.to_datetime("2021-08-13"),max_cases,'post 2', size=10)
plt.axvspan(pd.to_datetime("2021-04-05"),pd.to_datetime("2021-06-15"), alpha=0.5, color='palegreen')
plt.text(pd.to_datetime("2021-04-06"),0000,'Lockdown', size=10)
plt.title("Logistic regression of cumulative covid cases "+state)

import matplotlib.pyplot as plt
plt.rcParams["figure.figsize"] = (20,3)
ax1 = plt.plot()
plt.plot(working_data["date"].values,working_data["linear_percentage_change"].abs().values,c='b')
plt.ylabel('linear regression predicted cases % change',color='b')

ax2 = plt.gca().twinx()
ax2.plot(working_data["date"].values,working_data["Confirmed"].values,c='r')

plt.ylabel('true cumulative covid cases',color='r')
plt.axvspan(pd.to_datetime("2020-08-13"),pd.to_datetime("2020-11-09"), alpha=0.3, color='c')
plt.text(pd.to_datetime("2020-09-13"),max_cases,'wave 1', size=10)
plt.axvspan(pd.to_datetime("2020-11-10"),pd.to_datetime("2021-03-21"), alpha=0.3, color='m')
plt.text(pd.to_datetime("2020-12-13"),max_cases,'transition', size=10)
plt.axvspan(pd.to_datetime("2021-03-22"),pd.to_datetime("2021-07-06"), alpha=0.3, color='y')
plt.text(pd.to_datetime("2021-05-13"),max_cases,'wave 2', size=10)
plt.axvspan(pd.to_datetime("2021-07-07"),pd.to_datetime("2021-10-31"), alpha=0.3, color='g')
plt.text(pd.to_datetime("2021-08-13"),max_cases,'post 2', size=10)
plt.axvspan(pd.to_datetime("2021-04-05"),pd.to_datetime("2021-06-15"), alpha=0.5, color='palegreen')
plt.text(pd.to_datetime("2021-04-06"),0000,'Lockdown', size=10)
plt.title("linear percerntage change of Logistic regression of cumulative covid cases "+state)

import matplotlib.pyplot as plt
plt.rcParams["figure.figsize"] = (20,3)
ax1 = plt.plot()
plt.plot(working_data["date"].values,working_data["logistic_percentage_change"].abs().values,c='b')
plt.ylabel('logistic regression predicted cases % change',color='b')

ax2 = plt.gca().twinx()
ax2.plot(working_data["date"].values,working_data["Confirmed"].values,c='r')
plt.ylabel('true cumulative covid cases',color='r')
plt.axvspan(pd.to_datetime("2020-08-13"),pd.to_datetime("2020-11-09"), alpha=0.3, color='c')
plt.text(pd.to_datetime("2020-09-13"),max_cases,'wave 1', size=10)
plt.axvspan(pd.to_datetime("2020-11-10"),pd.to_datetime("2021-03-21"), alpha=0.3, color='m')
plt.text(pd.to_datetime("2020-12-13"),max_cases,'transition', size=10)
plt.axvspan(pd.to_datetime("2021-03-22"),pd.to_datetime("2021-07-06"), alpha=0.3, color='y')
plt.text(pd.to_datetime("2021-05-13"),max_cases,'wave 2', size=10)
plt.axvspan(pd.to_datetime("2021-07-07"),pd.to_datetime("2021-10-31"), alpha=0.3, color='g')
plt.text(pd.to_datetime("2021-08-13"),max_cases,'post 2', size=10)
plt.axvspan(pd.to_datetime("2021-04-05"),pd.to_datetime("2021-06-15"), alpha=0.5, color='palegreen')
plt.text(pd.to_datetime("2021-04-06"),0000,'Lockdown', size=10)
plt.title("logistic percerntage change of Logistic regression of cumulative covid cases "+state)

import numpy as np

def geo_mean(iterable):
    a = np.array(iterable)
    return a.prod()**(1.0/len(a))

print('mean linear change ',working_data['linear_percentage_change'].iloc[20:,].abs().mean())
print('mean logistic change ',working_data['logistic_percentage_change'].iloc[20:,].abs().mean())